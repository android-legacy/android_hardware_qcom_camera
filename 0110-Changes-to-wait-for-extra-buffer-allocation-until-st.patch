From fd559cd22a9763bf6edfd24768f04ee4f01009f3 Mon Sep 17 00:00:00 2001
From: Guruprasad Gaonkar <ggaonk@codeaurora.org>
Date: Fri, 27 Dec 2013 16:13:45 -0800
Subject: [PATCH 110/176] Changes to wait for extra buffer allocation until
 start stream.

 Deferred buffer allocation will be delayed till we start streams.
 We can queue extra buffer only after stream start.

Change-Id: I7f0f940989980e71068a7812cabac8d12cce31c9
---
 QCamera2/HAL/QCameraChannel.cpp |  7 ++++++-
 QCamera2/HAL/QCameraStream.cpp  | 45 +++++++++++++++++++++++++++++++++++++++--
 QCamera2/HAL/QCameraStream.h    |  9 ++++++++-
 3 files changed, 57 insertions(+), 4 deletions(-)

diff --git a/QCamera2/HAL/QCameraChannel.cpp b/QCamera2/HAL/QCameraChannel.cpp
index afb35e2..6e91ddf 100644
--- a/QCamera2/HAL/QCameraChannel.cpp
+++ b/QCamera2/HAL/QCameraChannel.cpp
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2013, The Linux Foundataion. All rights reserved.
+/* Copyright (c) 2012-2014 The Linux Foundataion. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
@@ -254,6 +254,11 @@ int32_t QCameraChannel::start()
         }
     } else {
         m_bIsActive = true;
+        for (int i = 0; i < m_numStreams; i++) {
+            if (mStreams[i] != NULL) {
+                mStreams[i]->cond_signal();
+            }
+        }
     }
 
     return rc;
diff --git a/QCamera2/HAL/QCameraStream.cpp b/QCamera2/HAL/QCameraStream.cpp
index 8c7827b..cf1e920 100644
--- a/QCamera2/HAL/QCameraStream.cpp
+++ b/QCamera2/HAL/QCameraStream.cpp
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2013, The Linux Foundataion. All rights reserved.
+/* Copyright (c) 2012-2014 The Linux Foundataion. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
@@ -181,7 +181,8 @@ QCameraStream::QCameraStream(QCameraAllocator &allocator,
         mStreamBufsAcquired(false),
         m_bActive(false),
         mDynBufAlloc(false),
-        mBufAllocPid(0)
+        mBufAllocPid(0),
+        wait_for_cond(false)
 {
     mMemVtbl.user_data = this;
     mMemVtbl.get_bufs = get_bufs;
@@ -322,6 +323,8 @@ int32_t QCameraStream::start()
     if (rc == NO_ERROR) {
         m_bActive = true;
     }
+    pthread_mutex_init(&m_lock, NULL);
+    pthread_cond_init(&m_cond, NULL);
     return rc;
 }
 
@@ -688,6 +691,9 @@ int32_t QCameraStream::getBufs(cam_frame_len_offset_t *offset,
     *bufs = mBufDefs;
 
     if (mNumBufsNeedAlloc > 0) {
+        pthread_mutex_lock(&m_lock);
+        wait_for_cond = TRUE;
+        pthread_mutex_unlock(&m_lock);
         ALOGD("%s: Still need to allocate %d buffers",
               __func__, mNumBufsNeedAlloc);
         // remember memops table
@@ -718,6 +724,7 @@ void *QCameraStream::BufAllocRoutine(void *data)
     int32_t rc = NO_ERROR;
 
     ALOGD("%s: E", __func__);
+    pme->cond_wait();
     if (pme->mNumBufsNeedAlloc > 0) {
         uint8_t numBufAlloc = pme->mNumBufs - pme->mNumBufsNeedAlloc;
         rc = pme->mAllocator.allocateMoreStreamBuf(pme->mStreamBufs,
@@ -748,6 +755,40 @@ void *QCameraStream::BufAllocRoutine(void *data)
 }
 
 /*===========================================================================
+ * FUNCTION   : cond_signal
+ *
+ * DESCRIPTION: signal if flag "wait_for_cond" is set
+ *
+ *==========================================================================*/
+void QCameraStream::cond_signal()
+{
+    pthread_mutex_lock(&m_lock);
+    if(wait_for_cond == TRUE){
+        wait_for_cond = FALSE;
+        pthread_cond_signal(&m_cond);
+    }
+    pthread_mutex_unlock(&m_lock);
+}
+
+
+/*===========================================================================
+ * FUNCTION   : cond_wait
+ *
+ * DESCRIPTION: wait on if flag "wait_for_cond" is set
+ *
+ *==========================================================================*/
+void QCameraStream::cond_wait()
+{
+    pthread_mutex_lock(&m_lock);
+    if(wait_for_cond == TRUE){
+        pthread_mutex_unlock(&m_lock);
+        pthread_cond_wait(&m_cond, &m_lock);
+    }else{
+        pthread_mutex_unlock(&m_lock);
+    }
+}
+
+/*===========================================================================
  * FUNCTION   : putBufs
  *
  * DESCRIPTION: deallocate stream buffers
diff --git a/QCamera2/HAL/QCameraStream.h b/QCamera2/HAL/QCameraStream.h
index c878e7f..c8b123a 100644
--- a/QCamera2/HAL/QCameraStream.h
+++ b/QCamera2/HAL/QCameraStream.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012, The Linux Foundataion. All rights reserved.
+/* Copyright (c) 2012,2014 The Linux Foundataion. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -96,6 +96,9 @@ public:
     int mDumpMetaFrame;
     int mDumpSkipCnt;
 
+    void cond_wait();
+    void cond_signal();
+
 private:
     uint32_t mCamHandle;
     uint32_t mChannelHandle;
@@ -148,6 +151,10 @@ private:
     int32_t invalidateBuf(int index);
     int32_t cleanInvalidateBuf(int index);
 
+    bool wait_for_cond;
+    pthread_mutex_t m_lock;
+    pthread_cond_t m_cond;
+
 };
 
 }; // namespace qcamera
-- 
1.8.3.1

