From dfc44f7f762dc7f1b3fea41b2c58646f2eb70cd8 Mon Sep 17 00:00:00 2001
From: Ivan Evlogiev <ivanevlogiev@codeaurora.org>
Date: Thu, 6 Feb 2014 18:32:44 +0200
Subject: [PATCH 108/176] QCamera2: Disable flash during HDR

- Flash is disabled for HDR manual selection and for auto HDR positive

Change-Id: I75cf0111ae9f3b6c008f062d237e6c65202482cb
CRs-Fixed: 612391
---
 QCamera2/HAL/QCameraParameters.cpp | 96 +++++++++++++++++++++++++++++++++++++-
 QCamera2/HAL/QCameraParameters.h   |  3 +-
 2 files changed, 96 insertions(+), 3 deletions(-)

diff --git a/QCamera2/HAL/QCameraParameters.cpp b/QCamera2/HAL/QCameraParameters.cpp
index 552cb5a..048e311 100644
--- a/QCamera2/HAL/QCameraParameters.cpp
+++ b/QCamera2/HAL/QCameraParameters.cpp
@@ -2660,6 +2660,8 @@ int32_t QCameraParameters::setSceneMode(const QCameraParameters& params)
                     updateParamEntry(KEY_QC_HDR_NEED_1X, need_hdr_1x);
                 }
 
+                enableFlash(!m_bHDREnabled);
+
                 AddSetParmEntryToBatch(m_pParamBuf,
                                        CAM_INTF_PARM_HDR_NEED_1X,
                                        sizeof(m_bHDR1xFrameEnabled),
@@ -4729,6 +4731,12 @@ int32_t QCameraParameters::setFlash(const char *flashStr)
             }
 
             updateParamEntry(KEY_FLASH_MODE, flashStr);
+
+            // If hdr is enabled, flash mode just need to be stored
+            if (isHDREnabled()) {
+              return NO_ERROR;
+            }
+
             return AddSetParmEntryToBatch(m_pParamBuf,
                                           CAM_INTF_PARM_LED_MODE,
                                           sizeof(value),
@@ -5404,7 +5412,6 @@ int32_t QCameraParameters::setAEBracket(const char *aecBracketStr)
  *==========================================================================*/
 int32_t QCameraParameters::setHDRAEBracket(cam_exp_bracketing_t hdrBracket)
 {
-
     int32_t rc = NO_ERROR;
     if(initBatchUpdate(m_pParamBuf) < 0 ) {
         ALOGE("%s:Failed to initialize group update table", __func__);
@@ -5442,7 +5449,68 @@ int32_t QCameraParameters::setHDRAEBracket(cam_exp_bracketing_t hdrBracket)
  *==========================================================================*/
 int32_t QCameraParameters::restoreAEBracket()
 {
-    return setHDRAEBracket(m_AEBracketingClient);
+    int32_t rc = enableFlash(true);
+
+    if (NO_ERROR == rc) {
+      rc = setHDRAEBracket(m_AEBracketingClient);
+    }
+
+    return rc;
+}
+
+/*===========================================================================
+ * FUNCTION   : enableFlash
+ *
+ * DESCRIPTION: restores client flash configuration or disables flash
+ *
+ * PARAMETERS :
+ *   @enableFlash : enable flash
+ *
+ * RETURN     : int32_t type of status
+ *              NO_ERROR  -- success
+ *              none-zero failure code
+ *==========================================================================*/
+int32_t QCameraParameters::enableFlash(bool bflag)
+{
+    int32_t rc = NO_ERROR;
+    if(initBatchUpdate(m_pParamBuf) < 0 ) {
+        ALOGE("%s:Failed to initialize group update table", __func__);
+        return BAD_TYPE;
+    }
+
+    const char *str = get(KEY_FLASH_MODE);
+
+    if (!bflag) {
+        str = FLASH_MODE_OFF;
+    }
+
+    int32_t value = lookupAttr(FLASH_MODES_MAP,
+        sizeof(FLASH_MODES_MAP)/sizeof(QCameraMap),
+        str);
+
+    if (value != NAME_NOT_FOUND) {
+        ALOGV("%s: Setting Flash value %s", __func__, flashStr);
+
+        rc = AddSetParmEntryToBatch(m_pParamBuf,
+                                      CAM_INTF_PARM_LED_MODE,
+                                      sizeof(value),
+                                      &value);
+        if (rc != NO_ERROR) {
+           ALOGE("%s:Failed to set led mode", __func__);
+          return rc;
+        }
+    } else {
+        ALOGE("%s:Wrong saved led mode", __func__);
+        return rc;
+    }
+
+    rc = commitSetBatch();
+    if (rc != NO_ERROR) {
+        ALOGE("%s:Failed to configure HDR bracketing", __func__);
+        return rc;
+    }
+
+    return rc;
 }
 
 /*===========================================================================
@@ -6809,6 +6877,30 @@ int32_t QCameraParameters::updateRAW(cam_dimension_t max_dim)
     setRawSize(raw_dim);
     return rc;
 }
+
+/*===========================================================================
+ * FUNCTION   : setHDRSceneEnable
+ *
+ * DESCRIPTION: sets hdr scene deteced flag
+ *
+ * PARAMETERS :
+ *   @bflag : hdr scene deteced
+ *
+ * RETURN     : nothing
+ *==========================================================================*/
+void QCameraParameters::setHDRSceneEnable(bool bflag)
+{
+    bool bupdate = false;
+    if (m_HDRSceneEnabled != bflag) {
+        bupdate = true;
+    }
+    m_HDRSceneEnabled = bflag;
+
+    if (bupdate) {
+        enableFlash(!isHDREnabled());
+    }
+}
+
 /*===========================================================================
  * FUNCTION   : getASDStateString
  *
diff --git a/QCamera2/HAL/QCameraParameters.h b/QCamera2/HAL/QCameraParameters.h
index c7e94e8..39268f9 100644
--- a/QCamera2/HAL/QCameraParameters.h
+++ b/QCamera2/HAL/QCameraParameters.h
@@ -499,6 +499,7 @@ public:
     bool isHDREnabled();
     bool isAutoHDREnabled();
     int32_t restoreAEBracket();
+    int32_t enableFlash(bool enableFlash);
     int32_t updateRAW(cam_dimension_t max_dim);
     bool isAVTimerEnabled();
 
@@ -524,7 +525,7 @@ public:
     bool isPreviewFlipChanged() { return m_bPreviewFlipChanged; };
     bool isVideoFlipChanged() { return m_bVideoFlipChanged; };
     bool isSnapshotFlipChanged() { return m_bSnapshotFlipChanged; };
-    void setHDRSceneEnable(bool bflag) {m_HDRSceneEnabled = bflag;};
+    void setHDRSceneEnable(bool bflag);
 
     const char *getASDStateString(cam_auto_scene_t scene);
     bool isHDRThumbnailProcessNeeded() { return m_bHDRThumbnailProcessNeeded; };
-- 
1.8.3.1

