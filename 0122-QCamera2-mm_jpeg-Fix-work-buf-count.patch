From 7445c284eef6fb27a78c1ee42f818370c0fdfeb5 Mon Sep 17 00:00:00 2001
From: Kamen Kirov <kkirov@codeaurora.org>
Date: Mon, 9 Dec 2013 20:34:51 +0200
Subject: [PATCH 122/176] QCamera2: mm_jpeg: Fix work buf count

Correctly allocate work buffers in different session
create scenarios.

Change-Id: Ib69aea5d89f021005eb08eff4fcbe9455f564e69
---
 QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg.h |  2 ++
 QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c | 29 +++++++++++++++++++++-----
 2 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg.h b/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg.h
index 23f3f74..6ecf02c 100644
--- a/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg.h
+++ b/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg.h
@@ -385,6 +385,8 @@ typedef struct mm_jpeg_obj_t {
   void *adsprpc_lib_handle;
 #endif
 
+  int num_sessions;
+
 } mm_jpeg_obj;
 
 /** mm_jpeg_pending_func_t:
diff --git a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c
index 5b243fd..fa0cab1 100644
--- a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c
+++ b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c
@@ -303,6 +303,8 @@ OMX_ERRORTYPE mm_jpeg_session_create(mm_jpeg_job_session_t* p_session)
     return rc;
   }
 
+  my_obj->num_sessions++;
+
   return rc;
 }
 
@@ -324,6 +326,7 @@ void mm_jpeg_session_destroy(mm_jpeg_job_session_t* p_session)
 {
   OMX_ERRORTYPE rc = OMX_ErrorNone;
   OMX_STATETYPE state;
+  mm_jpeg_obj *my_obj = (mm_jpeg_obj *) p_session->jpeg_obj;
 
   CDBG("%s:%d] E", __func__, __LINE__);
   if (NULL == p_session->omx_handle) {
@@ -365,6 +368,8 @@ void mm_jpeg_session_destroy(mm_jpeg_job_session_t* p_session)
     p_session->meta_enc_key = NULL;
   }
 
+  my_obj->num_sessions--;
+
   // Destroy next session
   if (p_session->next_session) {
     mm_jpeg_session_destroy(p_session->next_session);
@@ -2091,6 +2096,7 @@ int32_t mm_jpeg_create_session(mm_jpeg_obj *my_obj,
   uint32_t num_omx_sessions;
   uint32_t work_buf_size;
   mm_jpeg_queue_t *p_session_handle_q, *p_out_buf_q;
+  unsigned int work_bufs_need;
 
   /* validate the parameters */
   if ((p_params->num_src_bufs > MM_JPEG_MAX_BUF)
@@ -2110,10 +2116,14 @@ int32_t mm_jpeg_create_session(mm_jpeg_obj *my_obj,
   if (p_params->burst_mode) {
     num_omx_sessions = MM_JPEG_CONCURRENT_SESSIONS_COUNT;
   }
-
+  work_bufs_need = my_obj->num_sessions + num_omx_sessions;
+  if (work_bufs_need > MM_JPEG_CONCURRENT_SESSIONS_COUNT) {
+    work_bufs_need = MM_JPEG_CONCURRENT_SESSIONS_COUNT;
+  }
+  CDBG_ERROR("%s:%d] >>>> Work bufs need %d", __func__, __LINE__, work_bufs_need);
   work_buf_size = CEILING64(my_obj->max_pic_w) *
       CEILING64(my_obj->max_pic_h) * 1.5;
-  for (i = my_obj->work_buf_cnt; i < num_omx_sessions; i++) {
+  for (i = my_obj->work_buf_cnt; i < work_bufs_need; i++) {
      my_obj->ionBuffer[i].size = CEILING32(work_buf_size);
      CDBG_HIGH("Max picture size %d x %d, WorkBufSize = %ld",
          my_obj->max_pic_w, my_obj->max_pic_h, my_obj->ionBuffer[i].size);
@@ -2123,8 +2133,8 @@ int32_t mm_jpeg_create_session(mm_jpeg_obj *my_obj,
        CDBG_ERROR("%s:%d] Ion allocation failed",__func__, __LINE__);
        return -1;
      }
+     my_obj->work_buf_cnt++;
   }
-  my_obj->work_buf_cnt = num_omx_sessions;
 
   /* init omx handle queue */
   p_session_handle_q = (mm_jpeg_queue_t *) malloc(sizeof(*p_session_handle_q));
@@ -2152,6 +2162,7 @@ int32_t mm_jpeg_create_session(mm_jpeg_obj *my_obj,
   }
 
   for (i = 0; i < num_omx_sessions; i++) {
+    int buf_idx = 0;
     session_idx = mm_jpeg_get_new_session_idx(my_obj, clnt_idx, &p_session);
     if (session_idx < 0) {
       CDBG_ERROR("%s:%d] invalid session id (%d)", __func__, __LINE__, session_idx);
@@ -2165,7 +2176,16 @@ int32_t mm_jpeg_create_session(mm_jpeg_obj *my_obj,
     }
     p_prev_session = p_session;
 
-    p_session->work_buffer = my_obj->ionBuffer[i];
+    buf_idx = my_obj->num_sessions + i;
+    if (buf_idx < MM_JPEG_CONCURRENT_SESSIONS_COUNT) {
+      p_session->work_buffer = my_obj->ionBuffer[buf_idx];
+    } else {
+      p_session->work_buffer.addr = NULL;
+      p_session->work_buffer.ion_fd = -1;
+      p_session->work_buffer.p_pmem_fd = -1;
+    }
+
+    p_session->jpeg_obj = (void*)my_obj; /* save a ptr to jpeg_obj */
 
     ret = mm_jpeg_session_create(p_session);
     if (OMX_ErrorNone != ret) {
@@ -2184,7 +2204,6 @@ int32_t mm_jpeg_create_session(mm_jpeg_obj *my_obj,
     p_session->params = *p_params;
     p_session->client_hdl = client_hdl;
     p_session->sessionId = session_id;
-    p_session->jpeg_obj = (void*)my_obj; /* save a ptr to jpeg_obj */
     p_session->session_handle_q = p_session_handle_q;
     p_session->out_buf_q = p_out_buf_q;
 
-- 
1.8.3.1

