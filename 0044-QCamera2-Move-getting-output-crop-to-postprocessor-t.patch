From 9e862be4e18ae330e4f7adf9bbd690e93d9925f3 Mon Sep 17 00:00:00 2001
From: Ivan Evlogiev <ivanevlogiev@codeaurora.org>
Date: Fri, 25 Oct 2013 18:20:35 -0700
Subject: [PATCH 044/176] QCamera2: Move getting output crop to postprocessor
 thread

- Output crop is queried just before JPEG encoding from
postprocessot thread context

Change-Id: If7abbab9037914f1bb603a94cbc02db13c1d11a9
---
 QCamera2/HAL/QCamera2HWICallbacks.cpp | 125 ----------------------------------
 QCamera2/HAL/QCameraPostProc.cpp      |  59 ++++++++++++++--
 2 files changed, 52 insertions(+), 132 deletions(-)

diff --git a/QCamera2/HAL/QCamera2HWICallbacks.cpp b/QCamera2/HAL/QCamera2HWICallbacks.cpp
index 5e9a119..0211a92 100644
--- a/QCamera2/HAL/QCamera2HWICallbacks.cpp
+++ b/QCamera2/HAL/QCamera2HWICallbacks.cpp
@@ -315,12 +315,6 @@ void QCamera2HardwareInterface::capture_channel_cb_routine(mm_camera_super_buf_t
 void QCamera2HardwareInterface::postproc_channel_cb_routine(mm_camera_super_buf_t *recvd_frame,
                                                             void *userdata)
 {
-    int32_t rc = 0;
-    QCameraStream *pStream = NULL;
-    QCameraStream *pSrcStream = NULL;
-    QCameraStream *pThmbStream = NULL;
-    QCameraStream *pThmbSrcStream = NULL;
-
     ALOGD("[KPI Perf] %s: E", __func__);
     QCamera2HardwareInterface *pme = (QCamera2HardwareInterface *)userdata;
     if (pme == NULL ||
@@ -339,125 +333,6 @@ void QCamera2HardwareInterface::postproc_channel_cb_routine(mm_camera_super_buf_
     }
     *frame = *recvd_frame;
 
-    QCameraReprocessChannel *pChannel = pme->m_postprocessor.getReprocChannel();
-    if (pChannel == NULL ||
-        pChannel->getMyHandle() != recvd_frame->ch_id) {
-        ALOGE("%s: Reprocess channel doesn't exist, return here", __func__);
-        return;
-    }
-
-    for ( int i= 0 ; i < recvd_frame->num_bufs ; i++ ) {
-         if ( recvd_frame->bufs[i]->stream_type == CAM_STREAM_TYPE_OFFLINE_PROC ) {
-             mm_camera_buf_def_t * raw_frame = recvd_frame->bufs[i];
-             pStream = pChannel->getStreamByHandle(raw_frame->stream_id);
-             if (pStream != NULL) {
-                 if (pStream->isTypeOf(CAM_STREAM_TYPE_SNAPSHOT)
-                     || pStream->isOrignalTypeOf(CAM_STREAM_TYPE_SNAPSHOT)) {
-                         break;
-                 } else {
-                     pStream = NULL;
-                 }
-             }
-         }
-    }
-
-    if (pStream == NULL) {
-        ALOGE("%s: Reprocessing stream not found", __func__);
-    }
-
-    for ( int i= 0 ; i < recvd_frame->num_bufs ; i++ ) {
-         if ( recvd_frame->bufs[i]->stream_type == CAM_STREAM_TYPE_OFFLINE_PROC ) {
-             mm_camera_buf_def_t * raw_frame = recvd_frame->bufs[i];
-             pThmbStream = pChannel->getStreamByHandle(raw_frame->stream_id);
-             if (pThmbStream != NULL) {
-               if (pThmbStream->isTypeOf(CAM_STREAM_TYPE_PREVIEW) ||
-                   pThmbStream->isTypeOf(CAM_STREAM_TYPE_POSTVIEW) ||
-                   pThmbStream->isOrignalTypeOf(CAM_STREAM_TYPE_PREVIEW) ||
-                   pThmbStream->isOrignalTypeOf(CAM_STREAM_TYPE_POSTVIEW)) {
-                         break;
-                 } else {
-                   pThmbStream = NULL;
-                 }
-             }
-         }
-    }
-
-    if (pThmbStream == NULL) {
-        ALOGE("%s: Reprocessing thumbnail stream not found", __func__);
-    }
-
-    for (int i = 0; i < recvd_frame->num_bufs; i++) {
-        pSrcStream =
-            pChannel->getStreamByHandle(recvd_frame->bufs[i]->stream_id);
-        if (pSrcStream != NULL) {
-            if (pSrcStream->isTypeOf(CAM_STREAM_TYPE_SNAPSHOT)
-                || pSrcStream->isOrignalTypeOf(CAM_STREAM_TYPE_SNAPSHOT)) {
-                    break;
-            } else {
-                pSrcStream = NULL;
-            }
-        }
-    }
-
-    if (pSrcStream == NULL) {
-        ALOGE("%s: Snapshot stream doesn't exist", __func__);
-    }
-
-    for (int i = 0; i < recvd_frame->num_bufs; i++) {
-      pThmbSrcStream =
-            pChannel->getStreamByHandle(recvd_frame->bufs[i]->stream_id);
-        if (pThmbSrcStream != NULL) {
-          if (pThmbSrcStream->isTypeOf(CAM_STREAM_TYPE_PREVIEW) ||
-              pThmbSrcStream->isTypeOf(CAM_STREAM_TYPE_POSTVIEW) ||
-              pThmbSrcStream->isOrignalTypeOf(CAM_STREAM_TYPE_PREVIEW) ||
-              pThmbSrcStream->isOrignalTypeOf(CAM_STREAM_TYPE_POSTVIEW)) {
-                  break;
-            } else {
-              pThmbSrcStream = NULL;
-            }
-        }
-    }
-
-    if (pThmbSrcStream == NULL) {
-        ALOGE("%s: Thumbnail stream doesn't exist", __func__);
-    }
-
-    if (pStream && pSrcStream) {
-        cam_stream_parm_buffer_t param;
-        memset(&param, 0, sizeof(cam_stream_parm_buffer_t));
-        param.type = CAM_STREAM_PARAM_TYPE_GET_OUTPUT_CROP;
-
-        rc = pStream->getParameter(param);
-        if (rc != NO_ERROR) {
-            ALOGE("%s: stream setParameter for reprocess failed", __func__);
-        } else {
-           for (int i = 0; i < param.outputCrop.num_of_streams; i++) {
-               if (param.outputCrop.crop_info[i].stream_id
-                   == pStream->getMyServerID()) {
-                       pSrcStream->setCropInfo(param.outputCrop.crop_info[i].crop);
-               }
-           }
-        }
-    }
-
-    if (pThmbStream && pThmbSrcStream) {
-        cam_stream_parm_buffer_t param;
-        memset(&param, 0, sizeof(cam_stream_parm_buffer_t));
-        param.type = CAM_STREAM_PARAM_TYPE_GET_OUTPUT_CROP;
-
-        rc = pThmbStream->getParameter(param);
-        if (rc != NO_ERROR) {
-            ALOGE("%s: stream setParameter for reprocess failed", __func__);
-        } else {
-           for (int i = 0; i < param.outputCrop.num_of_streams; i++) {
-               if (param.outputCrop.crop_info[i].stream_id
-                   == pThmbStream->getMyServerID()) {
-                       pThmbSrcStream->setCropInfo(param.outputCrop.crop_info[i].crop);
-               }
-           }
-        }
-    }
-
     // send to postprocessor
     pme->m_postprocessor.processPPData(frame);
 
diff --git a/QCamera2/HAL/QCameraPostProc.cpp b/QCamera2/HAL/QCameraPostProc.cpp
index 09090eb..069e4cc 100644
--- a/QCamera2/HAL/QCameraPostProc.cpp
+++ b/QCamera2/HAL/QCameraPostProc.cpp
@@ -1069,6 +1069,8 @@ int32_t QCameraPostProcessor::encodeData(qcamera_jpeg_data_t *jpeg_job_data,
     QCameraStream *thumb_stream = NULL;
     mm_camera_buf_def_t *thumb_frame = NULL;
     mm_camera_super_buf_t *recvd_frame = jpeg_job_data->src_frame;
+    cam_rect_t crop;
+    cam_stream_parm_buffer_t param;
 
     // find channel
     QCameraChannel *pChannel = m_parent->getChannelByHandle(recvd_frame->ch_id);
@@ -1199,17 +1201,37 @@ int32_t QCameraPostProcessor::encodeData(qcamera_jpeg_data_t *jpeg_job_data,
     jpg_job.encode_job.src_index = main_frame->buf_idx;
     jpg_job.encode_job.dst_index = 0;
 
-    cam_rect_t crop;
-    memset(&crop, 0, sizeof(cam_rect_t));
-    main_stream->getCropInfo(crop);
-
     cam_dimension_t src_dim;
     memset(&src_dim, 0, sizeof(cam_dimension_t));
     main_stream->getFrameDimension(src_dim);
 
-    cam_dimension_t dst_dim;
     bool hdr_output_crop = m_parent->mParameters.isHDROutputCropEnabled();
 
+    crop.left = 0;
+    crop.top = 0;
+    crop.height = src_dim.height;
+    crop.width = src_dim.width;
+
+    if (hdr_output_crop) {
+        memset(&param, 0, sizeof(cam_stream_parm_buffer_t));
+        param.type = CAM_STREAM_PARAM_TYPE_GET_OUTPUT_CROP;
+
+        ret = main_stream->getParameter(param);
+        if (ret != NO_ERROR) {
+            ALOGE("%s: stream getParameter for reprocess failed", __func__);
+        } else {
+           for (int i = 0; i < param.outputCrop.num_of_streams; i++) {
+               if (param.outputCrop.crop_info[i].stream_id
+                   == main_stream->getMyServerID()) {
+                       crop = param.outputCrop.crop_info[i].crop;
+                       main_stream->setCropInfo(crop);
+               }
+           }
+        }
+    }
+
+    cam_dimension_t dst_dim;
+
     if (hdr_output_crop && crop.height) {
         dst_dim.height = crop.height;
     } else {
@@ -1252,11 +1274,34 @@ int32_t QCameraPostProcessor::encodeData(qcamera_jpeg_data_t *jpeg_job_data,
             thumb_stream = main_stream;
             thumb_frame = main_frame;
         }
-        memset(&crop, 0, sizeof(cam_rect_t));
-        thumb_stream->getCropInfo(crop);
+
         memset(&src_dim, 0, sizeof(cam_dimension_t));
         thumb_stream->getFrameDimension(src_dim);
         jpg_job.encode_job.thumb_dim.src_dim = src_dim;
+
+        crop.left = 0;
+        crop.top = 0;
+        crop.height = src_dim.height;
+        crop.width = src_dim.width;
+
+        if (hdr_output_crop) {
+            memset(&param, 0, sizeof(cam_stream_parm_buffer_t));
+            param.type = CAM_STREAM_PARAM_TYPE_GET_OUTPUT_CROP;
+
+            ret = thumb_stream->getParameter(param);
+            if (ret != NO_ERROR) {
+                ALOGE("%s: stream getParameter for reprocess failed", __func__);
+            } else {
+               for (int i = 0; i < param.outputCrop.num_of_streams; i++) {
+                   if (param.outputCrop.crop_info[i].stream_id
+                       == thumb_stream->getMyServerID()) {
+                           crop = param.outputCrop.crop_info[i].crop;
+                           thumb_stream->setCropInfo(crop);
+                   }
+               }
+            }
+        }
+
         m_parent->getThumbnailSize(jpg_job.encode_job.thumb_dim.dst_dim);
         int rotation = m_parent->getJpegRotation();
         if ((rotation == 90 || rotation == 270)
-- 
1.8.3.1

