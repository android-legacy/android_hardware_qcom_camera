From c8f1f5ef974375d4a5a7e8e239fd2d7d58d811c1 Mon Sep 17 00:00:00 2001
From: Nikola Georgiev <ngeorg@codeaurora.org>
Date: Tue, 3 Sep 2013 17:52:29 +0300
Subject: [PATCH 021/176] QCamera2: Prevent race condition on jpeg rotation

Check iamge rotation only on takePicture and save it in
QCamera2HWI

Change-Id: I7acf53bc423fe40f6c4f5120bb16f22875af8d23
---
 QCamera2/HAL/QCamera2HWI.cpp | 33 ++++++++++++++++++++++++---------
 QCamera2/HAL/QCamera2HWI.h   |  2 ++
 2 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/QCamera2/HAL/QCamera2HWI.cpp b/QCamera2/HAL/QCamera2HWI.cpp
index 50f621b..1d55218 100644
--- a/QCamera2/HAL/QCamera2HWI.cpp
+++ b/QCamera2/HAL/QCamera2HWI.cpp
@@ -963,7 +963,8 @@ QCamera2HardwareInterface::QCamera2HardwareInterface(int cameraId)
       mLongshotEnabled(false),
       m_max_pic_width(0),
       m_max_pic_height(0),
-      mFlashNeeded(false)
+      mFlashNeeded(false),
+      mCaptureRotation(0)
 {
     mCameraDevice.common.tag = HARDWARE_DEVICE_TAG;
     mCameraDevice.common.version = HARDWARE_DEVICE_API_VERSION(1, 0);
@@ -2039,6 +2040,7 @@ int QCamera2HardwareInterface::takePicture()
 {
     int rc = NO_ERROR;
     uint8_t numSnapshots = mParameters.getNumOfSnapshots();
+    getOrientation();
     ALOGD("%s: E", __func__);
     if (mParameters.isZSLMode()) {
         QCameraPicChannel *pZSLChannel =
@@ -2252,6 +2254,8 @@ int QCamera2HardwareInterface::takeLiveSnapshot()
 {
     int rc = NO_ERROR;
 
+    getOrientation();
+
     // start post processor
     rc = m_postprocessor.start(m_channels[QCAMERA_CH_TYPE_SNAPSHOT]);
 
@@ -3721,7 +3725,7 @@ QCameraReprocessChannel *QCamera2HardwareInterface::addOnlineReprocChannel(
 
     if (needRotationReprocess()) {
         pp_config.feature_mask |= CAM_QCOM_FEATURE_ROTATION;
-        int rotation = mParameters.getJpegRotation();
+        int rotation = getJpegRotation();
         if (rotation == 0) {
             pp_config.rotation = ROTATE_0;
         } else if (rotation == 90) {
@@ -4664,9 +4668,9 @@ bool QCamera2HardwareInterface::needReprocess()
     }
 
     if ((gCamCapability[mCameraId]->qcom_supported_feature_mask & CAM_QCOM_FEATURE_ROTATION) > 0 &&
-            (mParameters.getJpegRotation() > 0) &&  (mParameters.getRecordingHintValue() == false)) {
+            (getJpegRotation() > 0) &&  (mParameters.getRecordingHintValue() == false)) {
             // current rotation is not zero, and pp has the capability to process rotation
-            ALOGD("%s: need to do reprocess for rotation=%d", __func__, mParameters.getJpegRotation());
+            ALOGD("%s: need to do reprocess for rotation=%d", __func__, getJpegRotation());
             pthread_mutex_unlock(&m_parm_lock);
             return true;
     }
@@ -4723,9 +4727,9 @@ bool QCamera2HardwareInterface::needRotationReprocess()
     }
 
         if ((gCamCapability[mCameraId]->qcom_supported_feature_mask & CAM_QCOM_FEATURE_ROTATION) > 0 &&
-            (mParameters.getJpegRotation() > 0) && (mParameters.getRecordingHintValue() == false)) {
+            (getJpegRotation() > 0) && (mParameters.getRecordingHintValue() == false)) {
             // current rotation is not zero, and pp has the capability to process rotation
-            ALOGD("%s: need to do reprocess for rotation=%d", __func__, mParameters.getJpegRotation());
+            ALOGD("%s: need to do reprocess for rotation=%d", __func__, getJpegRotation());
             pthread_mutex_unlock(&m_parm_lock);
             return true;
         }
@@ -4813,11 +4817,22 @@ int QCamera2HardwareInterface::getJpegQuality()
  * RETURN     : rotation information
  *==========================================================================*/
 int QCamera2HardwareInterface::getJpegRotation() {
-    int rotation = 0;
+    return mCaptureRotation;
+}
+
+/*===========================================================================
+ * FUNCTION   : getOrientation
+ *
+ * DESCRIPTION: get rotation information from camera parameters
+ *
+ * PARAMETERS : none
+ *
+ * RETURN     : rotation information
+ *==========================================================================*/
+void QCamera2HardwareInterface::getOrientation() {
     pthread_mutex_lock(&m_parm_lock);
-    rotation = mParameters.getJpegRotation();
+    mCaptureRotation = mParameters.getJpegRotation();
     pthread_mutex_unlock(&m_parm_lock);
-    return rotation;
 }
 
 /*===========================================================================
diff --git a/QCamera2/HAL/QCamera2HWI.h b/QCamera2/HAL/QCamera2HWI.h
index efd6b1f..16007e7 100644
--- a/QCamera2/HAL/QCamera2HWI.h
+++ b/QCamera2/HAL/QCamera2HWI.h
@@ -313,6 +313,7 @@ private:
     void getThumbnailSize(cam_dimension_t &dim);
     int getJpegQuality();
     int getJpegRotation();
+    void getOrientation();
     QCameraExif *getExifData();
 
     int32_t processAutoFocusEvent(cam_auto_focus_data_t &focus_data);
@@ -479,6 +480,7 @@ private:
     int32_t m_max_pic_width;
     int32_t m_max_pic_height;
     uint8_t mFlashNeeded;
+    int mCaptureRotation;
 };
 
 }; // namespace qcamera
-- 
1.8.3.1

