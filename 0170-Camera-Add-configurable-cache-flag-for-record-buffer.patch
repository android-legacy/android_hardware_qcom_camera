From 4f0b85eb40e826cbfc59ea5996f81dddf1b8663d Mon Sep 17 00:00:00 2001
From: Roja Rani Yarubandi <rojay@codeaurora.org>
Date: Thu, 6 Jun 2013 16:18:11 +0530
Subject: [PATCH 170/176] Camera: Add configurable cache flag for record
 buffers ION allocation

Add a configurable cache flag when allocating ION memory
for record buffers. For record buffers, if system prop
"persist.camera.mem.usecache" is 0, then uncached ION
memory will be used. By default, it's using cached memory.

CRs-Fixed: 484880

Change-Id: I86ba1a096713a6afa50d509337794fb21da10fc9
---
 QCamera/HAL/core/inc/QCameraHWI.h          |  8 ++++++--
 QCamera/HAL/core/src/QCameraHWI.cpp        | 13 ++++++++-----
 QCamera/HAL/core/src/QCameraHWI_Record.cpp | 11 ++++++++++-
 3 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/QCamera/HAL/core/inc/QCameraHWI.h b/QCamera/HAL/core/inc/QCameraHWI.h
index ff43244..e46d9e1 100755
--- a/QCamera/HAL/core/inc/QCameraHWI.h
+++ b/QCamera/HAL/core/inc/QCameraHWI.h
@@ -73,6 +73,9 @@ extern "C" {
 #define HISTOGRAM_STATS_SIZE 257
 #define NUM_HISTOGRAM_BUFFERS 3
 
+#define QCAMERA_ION_USE_CACHED true
+#define QCAMERA_ION_USE_UNCACHED false
+
 struct str_map {
     const char *const desc;
     int val;
@@ -545,9 +548,10 @@ public:
                     uint32_t buf_len,
                     int pmem_type,
                     mm_camera_frame_len_offset* offset,
-                    mm_camera_buf_def_t *buf_def);
+                    mm_camera_buf_def_t *buf_def,
+                    bool cached = QCAMERA_ION_USE_CACHED);
     int releaseHeapMem( QCameraHalHeap_t *heap);
-    int allocate_ion_memory(QCameraHalMemInfo_t * mem_info, int ion_type);
+    int allocate_ion_memory(QCameraHalMemInfo_t * mem_info, int ion_type, bool cached = QCAMERA_ION_USE_CACHED);
     int deallocate_ion_memory(QCameraHalMemInfo_t *mem_info);
 
     int cache_ops(QCameraHalMemInfo_t *mem_info,
diff --git a/QCamera/HAL/core/src/QCameraHWI.cpp b/QCamera/HAL/core/src/QCameraHWI.cpp
index c39afbe..9531876 100755
--- a/QCamera/HAL/core/src/QCameraHWI.cpp
+++ b/QCamera/HAL/core/src/QCameraHWI.cpp
@@ -2856,7 +2856,7 @@ int QCameraHardwareInterface::storeMetaDataInBuffers(int enable)
     return 0;
 }
 
-int QCameraHardwareInterface::allocate_ion_memory(QCameraHalMemInfo_t *mem_info, int ion_type)
+int QCameraHardwareInterface::allocate_ion_memory(QCameraHalMemInfo_t *mem_info, int ion_type, bool cached)
 {
     int rc = 0;
     struct ion_handle_data handle_data;
@@ -2875,7 +2875,9 @@ int QCameraHardwareInterface::allocate_ion_memory(QCameraHalMemInfo_t *mem_info,
     /* to make it page size aligned */
     alloc.len = (alloc.len + 4095) & (~4095);
     alloc.align = 4096;
-    alloc.flags = ION_FLAG_CACHED;
+    if(cached) {
+        alloc.flags = ION_FLAG_CACHED;
+    }
     alloc.heap_mask = ion_type;
     rc = ioctl(main_ion_fd, ION_IOC_ALLOC, &alloc);
     if (rc < 0) {
@@ -2932,7 +2934,8 @@ int QCameraHardwareInterface::initHeapMem( QCameraHalHeap_t *heap,
                                            uint32_t buf_len,
                                            int pmem_type,
                                            mm_camera_frame_len_offset* offset,
-                                           mm_camera_buf_def_t *buf_def)
+                                           mm_camera_buf_def_t *buf_def,
+                                           bool cached)
 {
     int rc = 0;
     int i;
@@ -2953,11 +2956,11 @@ int QCameraHardwareInterface::initHeapMem( QCameraHalHeap_t *heap,
 #ifdef USE_ION
         if (isZSLMode()) {
             rc = allocate_ion_memory(&heap->mem_info[i],
-                                     ((0x1 << CAMERA_ZSL_ION_HEAP_ID) | (0x1 << CAMERA_ZSL_ION_FALLBACK_HEAP_ID)));
+                                     ((0x1 << CAMERA_ZSL_ION_HEAP_ID) | (0x1 << CAMERA_ZSL_ION_FALLBACK_HEAP_ID)), cached);
         }
         else {
             rc = allocate_ion_memory(&heap->mem_info[i],
-                                     ((0x1 << CAMERA_ION_HEAP_ID) | (0x1 << CAMERA_ION_FALLBACK_HEAP_ID)));
+                                     ((0x1 << CAMERA_ION_HEAP_ID) | (0x1 << CAMERA_ION_FALLBACK_HEAP_ID)), cached);
         }
 
         if (rc < 0) {
diff --git a/QCamera/HAL/core/src/QCameraHWI_Record.cpp b/QCamera/HAL/core/src/QCameraHWI_Record.cpp
index c8e82c2..0c47a5e 100755
--- a/QCamera/HAL/core/src/QCameraHWI_Record.cpp
+++ b/QCamera/HAL/core/src/QCameraHWI_Record.cpp
@@ -201,12 +201,21 @@ status_t QCameraStream_record::getBuf(mm_camera_frame_len_offset *frame_offset_i
 
     memset(mRecordBuf, 0, sizeof(mRecordBuf));
     memcpy(&mFrameOffsetInfo, frame_offset_info, sizeof(mFrameOffsetInfo));
+
+    char value[32];
+    bool cached = QCAMERA_ION_USE_CACHED;
+    property_get("persist.camera.mem.usecache", value, "1");
+    if (atoi(value) == 0) {
+      cached = QCAMERA_ION_USE_UNCACHED;
+    }
+    ALOGD("%s: Record buffers are using cached(1)/uncached(0) memory %d",__func__,cached);
     if (mHalCamCtrl->initHeapMem(&mHalCamCtrl->mRecordingMemory,
                                  mNumBuffers,
                                  mFrameOffsetInfo.frame_len,
                                  MSM_PMEM_VIDEO,
                                  &mFrameOffsetInfo,
-                                 mRecordBuf) < 0) {
+                                 mRecordBuf,
+                                 cached) < 0) {
         ALOGE("%s: Error getting heap mem for recording", __func__);
         return NO_MEMORY;
     }
-- 
1.8.3.1

